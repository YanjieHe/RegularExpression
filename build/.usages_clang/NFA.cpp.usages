22 serialization::archive 16 0 0 0 0 59 /home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/build 0 0 614 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 9 "NFA.hpp" 1 10 1 19 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 8 iostream 2 11 2 19 18446744073709551615 1 > 2 19 2 20 18446744073709551615 5 using 3 1 3 6 18446744073709551615 3 std 3 7 3 10 0 2 :: 3 10 3 12 18446744073709551615 20 dynamic_pointer_cast 3 12 3 32 1 1 ; 3 32 3 33 18446744073709551615 5 using 4 1 4 6 18446744073709551615 3 std 4 7 4 10 0 2 :: 4 10 4 12 18446744073709551615 4 endl 4 12 4 16 2 1 ; 4 16 4 17 18446744073709551615 5 using 5 1 5 6 18446744073709551615 3 std 5 7 5 10 0 2 :: 5 10 5 12 18446744073709551615 5 wcout 5 12 5 17 3 1 ; 5 17 5 18 18446744073709551615 7 NFAEdge 7 1 7 8 4 2 :: 7 8 7 10 4 7 NFAEdge 7 10 7 17 4 1 ( 7 17 7 18 4 3 int 7 18 7 21 18446744073709551615 4 from 7 22 7 26 5 1 , 7 26 7 27 4 3 int 7 28 7 31 18446744073709551615 2 to 7 32 7 34 6 1 , 7 34 7 35 4 3 int 7 36 7 39 18446744073709551615 7 pattern 7 40 7 47 7 1 ) 7 47 7 48 4 1 : 8 2 8 3 4 4 from 8 4 8 8 8 1 { 8 8 8 9 18446744073709551615 4 from 8 9 8 13 5 1 } 8 13 8 14 18446744073709551615 1 , 9 2 9 3 4 2 to 9 4 9 6 9 1 { 9 6 9 7 18446744073709551615 2 to 9 7 9 9 6 1 } 9 9 9 10 18446744073709551615 1 , 10 2 10 3 4 7 pattern 10 4 10 11 10 1 ( 10 11 10 12 4 7 pattern 10 12 10 19 7 1 ) 10 19 10 20 4 1 { 11 1 11 2 18446744073709551615 1 } 12 1 12 2 18446744073709551615 8 NFAGraph 13 1 13 9 11 2 :: 13 9 13 11 11 8 NFAGraph 13 11 13 19 11 1 ( 13 19 13 20 11 1 ) 13 20 13 21 11 1 { 14 1 14 2 18446744073709551615 1 } 15 1 15 2 18446744073709551615 3 int 16 1 16 4 18446744073709551615 8 NFAGraph 16 5 16 13 11 2 :: 16 13 16 15 12 7 AddNode 16 15 16 22 12 1 ( 16 22 16 23 12 1 ) 16 23 16 24 12 1 { 17 1 17 2 18446744073709551615 3 int 18 2 18 5 18446744073709551615 1 n 18 6 18 7 13 1 = 18 8 18 9 18446744073709551615 3 adj 18 10 18 13 14 1 . 18 13 18 14 15 4 size 18 14 18 18 15 1 ( 18 18 18 19 15 1 ) 18 19 18 20 15 1 ; 18 20 18 21 18446744073709551615 3 adj 19 2 19 5 14 1 . 19 5 19 6 16 9 push_back 19 6 19 15 16 1 ( 19 15 19 16 16 6 vector 19 16 19 22 17 1 < 19 22 19 23 17 7 NFAEdge 19 23 19 30 4 1 > 19 30 19 31 17 1 ( 19 31 19 32 17 1 ) 19 32 19 33 17 1 ) 19 33 19 34 16 1 ; 19 34 19 35 18446744073709551615 7 isFinal 20 2 20 9 18 1 . 20 9 20 10 16 9 push_back 20 10 20 19 16 1 ( 20 19 20 20 16 4 true 20 20 20 24 18446744073709551615 1 ) 20 24 20 25 16 1 ; 20 25 20 26 18446744073709551615 6 return 21 2 21 8 18446744073709551615 1 n 21 9 21 10 13 1 ; 21 10 21 11 18446744073709551615 1 } 22 1 22 2 18446744073709551615 4 void 23 1 23 5 18446744073709551615 8 NFAGraph 23 6 23 14 11 2 :: 23 14 23 16 19 7 AddEdge 23 16 23 23 19 1 ( 23 23 23 24 19 7 NFAEdge 23 24 23 31 4 4 edge 23 32 23 36 20 1 ) 23 36 23 37 19 1 { 24 1 24 2 18446744073709551615 3 adj 25 2 25 5 14 1 . 25 5 25 6 21 2 at 25 6 25 8 21 1 ( 25 8 25 9 21 4 edge 25 9 25 13 20 1 . 25 13 25 14 18446744073709551615 4 from 25 14 25 18 8 1 ) 25 18 25 19 21 1 . 25 19 25 20 16 9 push_back 25 20 25 29 16 1 ( 25 29 25 30 16 4 edge 25 30 25 34 20 1 ) 25 34 25 35 16 1 ; 25 35 25 36 18446744073709551615 1 } 26 1 26 2 18446744073709551615 3 int 27 1 27 4 18446744073709551615 8 NFAGraph 27 5 27 13 11 2 :: 27 13 27 15 22 9 NodeCount 27 15 27 24 22 1 ( 27 24 27 25 22 1 ) 27 25 27 26 22 1 { 28 1 28 2 18446744073709551615 6 return 29 2 29 8 18446744073709551615 3 adj 29 9 29 12 14 1 . 29 12 29 13 15 4 size 29 13 29 17 15 1 ( 29 17 29 18 15 1 ) 29 18 29 19 15 1 ; 29 19 29 20 18446744073709551615 1 } 30 1 30 2 18446744073709551615 11 NFASubgraph 31 1 31 12 23 2 :: 31 12 31 14 23 11 NFASubgraph 31 14 31 25 23 1 ( 31 25 31 26 23 3 int 31 26 31 29 18446744073709551615 5 start 31 30 31 35 24 1 , 31 35 31 36 23 3 int 31 37 31 40 18446744073709551615 3 end 31 41 31 44 25 1 ) 31 44 31 45 23 1 : 32 2 32 3 23 5 start 32 4 32 9 26 1 { 32 9 32 10 18446744073709551615 5 start 32 10 32 15 24 1 } 32 15 32 16 18446744073709551615 1 , 33 2 33 3 23 3 end 33 4 33 7 27 1 { 33 7 33 8 18446744073709551615 3 end 33 8 33 11 25 1 } 33 11 33 12 18446744073709551615 1 { 34 1 34 2 18446744073709551615 1 } 35 1 35 2 18446744073709551615 3 NFA 36 1 36 4 28 2 :: 36 4 36 6 28 3 NFA 36 6 36 9 28 1 ( 36 9 36 10 28 1 ) 36 10 36 11 28 1 { 37 1 37 2 18446744073709551615 1 } 38 1 38 2 18446744073709551615 11 NFASubgraph 39 1 39 12 23 3 NFA 39 13 39 16 28 2 :: 39 16 39 18 29 7 Convert 39 18 39 25 29 1 ( 39 25 39 26 29 13 RegularExpPtr 39 26 39 39 30 3 exp 39 40 39 43 31 1 ) 39 43 39 44 29 1 { 40 1 40 2 18446744073709551615 6 switch 41 2 41 8 18446744073709551615 1 ( 41 9 41 10 18446744073709551615 3 exp 41 10 41 13 31 2 -> 41 13 41 15 18446744073709551615 4 kind 41 15 41 19 32 1 ) 41 19 41 20 18446744073709551615 1 { 42 2 42 3 18446744073709551615 4 case 43 2 43 6 18446744073709551615 21 RegularExpressionKind 43 7 43 28 33 2 :: 43 28 43 30 18446744073709551615 11 Alternation 43 30 43 41 34 1 : 43 41 43 42 18446744073709551615 1 { 44 2 44 3 18446744073709551615 6 return 45 3 45 9 18446744073709551615 18 ConvertAlternation 45 10 45 28 35 1 ( 45 28 45 29 35 20 dynamic_pointer_cast 46 4 46 24 36 1 < 46 24 46 25 36 21 AlternationExpression 46 25 46 46 37 1 > 46 46 46 47 36 1 ( 46 47 46 48 36 3 exp 46 48 46 51 31 1 ) 46 51 46 52 36 1 ) 46 52 46 53 35 1 ; 46 53 46 54 18446744073709551615 1 } 47 2 47 3 18446744073709551615 4 case 48 2 48 6 18446744073709551615 21 RegularExpressionKind 48 7 48 28 33 2 :: 48 28 48 30 18446744073709551615 13 Concatenation 48 30 48 43 38 1 : 48 43 48 44 18446744073709551615 1 { 49 2 49 3 18446744073709551615 6 return 50 3 50 9 18446744073709551615 20 ConvertConcatenation 50 10 50 30 39 1 ( 50 30 50 31 39 20 dynamic_pointer_cast 51 4 51 24 36 1 < 51 24 51 25 36 23 ConcatenationExpression 51 25 51 48 40 1 > 51 48 51 49 36 1 ( 51 49 51 50 36 3 exp 51 50 51 53 31 1 ) 51 53 51 54 36 1 ) 51 54 51 55 39 1 ; 51 55 51 56 18446744073709551615 1 } 52 2 52 3 18446744073709551615 4 case 53 2 53 6 18446744073709551615 21 RegularExpressionKind 53 7 53 28 33 2 :: 53 28 53 30 18446744073709551615 10 KleeneStar 53 30 53 40 41 1 : 53 40 53 41 18446744073709551615 1 { 54 2 54 3 18446744073709551615 6 return 55 3 55 9 18446744073709551615 16 ConvertKleenStar 55 10 55 26 42 1 ( 55 26 55 27 42 20 dynamic_pointer_cast 56 4 56 24 36 1 < 56 24 56 25 36 20 KleeneStarExpression 56 25 56 45 43 1 > 56 45 56 46 36 1 ( 56 46 56 47 36 3 exp 56 47 56 50 31 1 ) 56 50 56 51 36 1 ) 56 51 56 52 42 1 ; 56 52 56 53 18446744073709551615 1 } 57 2 57 3 18446744073709551615 7 default 58 2 58 9 18446744073709551615 1 : 58 9 58 10 18446744073709551615 4 case 59 2 59 6 18446744073709551615 21 RegularExpressionKind 59 7 59 28 33 2 :: 59 28 59 30 18446744073709551615 6 Symbol 59 30 59 36 44 1 : 59 36 59 37 18446744073709551615 1 { 60 2 60 3 18446744073709551615 6 return 61 3 61 9 18446744073709551615 13 ConvertSymbol 61 10 61 23 45 1 ( 61 23 61 24 45 20 dynamic_pointer_cast 61 24 61 44 36 1 < 61 44 61 45 36 16 SymbolExpression 61 45 61 61 46 1 > 61 61 61 62 36 1 ( 61 62 61 63 36 3 exp 61 63 61 66 31 1 ) 61 66 61 67 36 1 ) 61 67 61 68 45 1 ; 61 68 61 69 18446744073709551615 1 } 62 2 62 3 18446744073709551615 1 } 63 2 63 3 18446744073709551615 1 } 64 1 64 2 18446744073709551615 11 NFASubgraph 65 1 65 12 23 3 NFA 65 13 65 16 28 2 :: 65 16 65 18 35 18 ConvertAlternation 65 18 65 36 35 1 ( 65 36 65 37 35 17 AlternationExpPtr 65 37 65 54 47 3 exp 65 55 65 58 48 1 ) 65 58 65 59 35 1 { 66 1 66 2 18446744073709551615 11 NFASubgraph 67 2 67 13 23 6 graph1 67 14 67 20 49 1 = 67 21 67 22 18446744073709551615 7 Convert 67 23 67 30 29 1 ( 67 30 67 31 29 3 exp 67 31 67 34 48 2 -> 67 34 67 36 18446744073709551615 4 left 67 36 67 40 50 1 ) 67 40 67 41 29 1 ; 67 41 67 42 18446744073709551615 11 NFASubgraph 68 2 68 13 23 6 graph2 68 14 68 20 51 1 = 68 21 68 22 18446744073709551615 7 Convert 68 23 68 30 29 1 ( 68 30 68 31 29 3 exp 68 31 68 34 48 2 -> 68 34 68 36 18446744073709551615 5 right 68 36 68 41 52 1 ) 68 41 68 42 29 1 ; 68 42 68 43 18446744073709551615 3 int 69 2 69 5 18446744073709551615 2 in 69 6 69 8 53 1 = 69 9 69 10 18446744073709551615 1 G 69 11 69 12 54 1 . 69 12 69 13 12 7 AddNode 69 13 69 20 12 1 ( 69 20 69 21 12 1 ) 69 21 69 22 12 1 ; 69 22 69 23 18446744073709551615 3 int 70 2 70 5 18446744073709551615 3 out 70 6 70 9 55 1 = 70 10 70 11 18446744073709551615 1 G 70 12 70 13 54 1 . 70 13 70 14 12 7 AddNode 70 14 70 21 12 1 ( 70 21 70 22 12 1 ) 70 22 70 23 12 1 ; 70 23 70 24 18446744073709551615 1 G 71 2 71 3 54 1 . 71 3 71 4 19 7 AddEdge 71 4 71 11 19 1 ( 71 11 71 12 19 7 NFAEdge 71 12 71 19 4 1 ( 71 19 71 20 4 2 in 71 20 71 22 53 1 , 71 22 71 23 4 6 graph1 71 24 71 30 49 1 . 71 30 71 31 18446744073709551615 5 start 71 31 71 36 26 1 , 71 36 71 37 4 1 - 71 38 71 39 18446744073709551615 1 1 71 39 71 40 18446744073709551615 1 ) 71 40 71 41 4 1 ) 71 41 71 42 19 1 ; 71 42 71 43 18446744073709551615 1 G 72 2 72 3 54 1 . 72 3 72 4 19 7 AddEdge 72 4 72 11 19 1 ( 72 11 72 12 19 7 NFAEdge 72 12 72 19 4 1 ( 72 19 72 20 4 2 in 72 20 72 22 53 1 , 72 22 72 23 4 6 graph2 72 24 72 30 51 1 . 72 30 72 31 18446744073709551615 5 start 72 31 72 36 26 1 , 72 36 72 37 4 1 - 72 38 72 39 18446744073709551615 1 1 72 39 72 40 18446744073709551615 1 ) 72 40 72 41 4 1 ) 72 41 72 42 19 1 ; 72 42 72 43 18446744073709551615 1 G 73 2 73 3 54 1 . 73 3 73 4 19 7 AddEdge 73 4 73 11 19 1 ( 73 11 73 12 19 7 NFAEdge 73 12 73 19 4 1 ( 73 19 73 20 4 6 graph1 73 20 73 26 49 1 . 73 26 73 27 18446744073709551615 3 end 73 27 73 30 27 1 , 73 30 73 31 4 3 out 73 32 73 35 55 1 , 73 35 73 36 4 1 - 73 37 73 38 18446744073709551615 1 1 73 38 73 39 18446744073709551615 1 ) 73 39 73 40 4 1 ) 73 40 73 41 19 1 ; 73 41 73 42 18446744073709551615 1 G 74 2 74 3 54 1 . 74 3 74 4 19 7 AddEdge 74 4 74 11 19 1 ( 74 11 74 12 19 7 NFAEdge 74 12 74 19 4 1 ( 74 19 74 20 4 6 graph2 74 20 74 26 51 1 . 74 26 74 27 18446744073709551615 3 end 74 27 74 30 27 1 , 74 30 74 31 4 3 out 74 32 74 35 55 1 , 74 35 74 36 4 1 - 74 37 74 38 18446744073709551615 1 1 74 38 74 39 18446744073709551615 1 ) 74 39 74 40 4 1 ) 74 40 74 41 19 1 ; 74 41 74 42 18446744073709551615 6 return 75 2 75 8 18446744073709551615 11 NFASubgraph 75 9 75 20 23 1 ( 75 20 75 21 23 2 in 75 21 75 23 53 1 , 75 23 75 24 23 3 out 75 25 75 28 55 1 ) 75 28 75 29 23 1 ; 75 29 75 30 18446744073709551615 1 } 76 1 76 2 18446744073709551615 11 NFASubgraph 77 1 77 12 23 3 NFA 77 13 77 16 28 2 :: 77 16 77 18 39 20 ConvertConcatenation 77 18 77 38 39 1 ( 77 38 77 39 39 19 ConcatenationExpPtr 77 39 77 58 56 3 exp 77 59 77 62 57 1 ) 77 62 77 63 39 1 { 78 1 78 2 18446744073709551615 11 NFASubgraph 79 2 79 13 23 3 src 79 14 79 17 58 1 = 79 18 79 19 18446744073709551615 7 Convert 79 20 79 27 29 1 ( 79 27 79 28 29 3 exp 79 28 79 31 57 2 -> 79 31 79 33 18446744073709551615 4 left 79 33 79 37 59 1 ) 79 37 79 38 29 1 ; 79 38 79 39 18446744073709551615 11 NFASubgraph 80 2 80 13 23 4 dest 80 14 80 18 60 1 = 80 19 80 20 18446744073709551615 7 Convert 80 21 80 28 29 1 ( 80 28 80 29 29 3 exp 80 29 80 32 57 2 -> 80 32 80 34 18446744073709551615 5 right 80 34 80 39 61 1 ) 80 39 80 40 29 1 ; 80 40 80 41 18446744073709551615 1 G 81 2 81 3 54 1 . 81 3 81 4 19 7 AddEdge 81 4 81 11 19 1 ( 81 11 81 12 19 7 NFAEdge 81 12 81 19 4 1 ( 81 19 81 20 4 3 src 81 20 81 23 58 1 . 81 23 81 24 18446744073709551615 3 end 81 24 81 27 27 1 , 81 27 81 28 4 4 dest 81 29 81 33 60 1 . 81 33 81 34 18446744073709551615 5 start 81 34 81 39 26 1 , 81 39 81 40 4 1 - 81 41 81 42 18446744073709551615 1 1 81 42 81 43 18446744073709551615 1 ) 81 43 81 44 4 1 ) 81 44 81 45 19 1 ; 81 45 81 46 18446744073709551615 6 return 82 2 82 8 18446744073709551615 11 NFASubgraph 82 9 82 20 23 1 ( 82 20 82 21 23 3 src 82 21 82 24 58 1 . 82 24 82 25 18446744073709551615 5 start 82 25 82 30 26 1 , 82 30 82 31 23 4 dest 82 32 82 36 60 1 . 82 36 82 37 18446744073709551615 3 end 82 37 82 40 27 1 ) 82 40 82 41 23 1 ; 82 41 82 42 18446744073709551615 1 } 83 1 83 2 18446744073709551615 11 NFASubgraph 84 1 84 12 23 3 NFA 84 13 84 16 28 2 :: 84 16 84 18 42 16 ConvertKleenStar 84 18 84 34 42 1 ( 84 34 84 35 42 16 KleeneStarExpPtr 84 35 84 51 62 3 exp 84 52 84 55 63 1 ) 84 55 84 56 42 1 { 85 1 85 2 18446744073709551615 11 NFASubgraph 86 2 86 13 23 5 graph 86 14 86 19 64 1 = 86 20 86 21 18446744073709551615 7 Convert 86 22 86 29 29 1 ( 86 29 86 30 29 3 exp 86 30 86 33 63 2 -> 86 33 86 35 18446744073709551615 8 innerExp 86 35 86 43 65 1 ) 86 43 86 44 29 1 ; 86 44 86 45 18446744073709551615 3 int 87 2 87 5 18446744073709551615 2 in 87 6 87 8 66 1 = 87 9 87 10 18446744073709551615 1 G 87 11 87 12 54 1 . 87 12 87 13 12 7 AddNode 87 13 87 20 12 1 ( 87 20 87 21 12 1 ) 87 21 87 22 12 1 ; 87 22 87 23 18446744073709551615 3 int 88 2 88 5 18446744073709551615 3 out 88 6 88 9 67 1 = 88 10 88 11 18446744073709551615 1 G 88 12 88 13 54 1 . 88 13 88 14 12 7 AddNode 88 14 88 21 12 1 ( 88 21 88 22 12 1 ) 88 22 88 23 12 1 ; 88 23 88 24 18446744073709551615 1 G 89 2 89 3 54 1 . 89 3 89 4 19 7 AddEdge 89 4 89 11 19 1 ( 89 11 89 12 19 7 NFAEdge 89 12 89 19 4 1 ( 89 19 89 20 4 2 in 89 20 89 22 66 1 , 89 22 89 23 4 5 graph 89 24 89 29 64 1 . 89 29 89 30 18446744073709551615 5 start 89 30 89 35 26 1 , 89 35 89 36 4 1 - 89 37 89 38 18446744073709551615 1 1 89 38 89 39 18446744073709551615 1 ) 89 39 89 40 4 1 ) 89 40 89 41 19 1 ; 89 41 89 42 18446744073709551615 1 G 90 2 90 3 54 1 . 90 3 90 4 19 7 AddEdge 90 4 90 11 19 1 ( 90 11 90 12 19 7 NFAEdge 90 12 90 19 4 1 ( 90 19 90 20 4 5 graph 90 20 90 25 64 1 . 90 25 90 26 18446744073709551615 3 end 90 26 90 29 27 1 , 90 29 90 30 4 5 graph 90 31 90 36 64 1 . 90 36 90 37 18446744073709551615 5 start 90 37 90 42 26 1 , 90 42 90 43 4 1 - 90 44 90 45 18446744073709551615 1 1 90 45 90 46 18446744073709551615 1 ) 90 46 90 47 4 1 ) 90 47 90 48 19 1 ; 90 48 90 49 18446744073709551615 1 G 91 2 91 3 54 1 . 91 3 91 4 19 7 AddEdge 91 4 91 11 19 1 ( 91 11 91 12 19 7 NFAEdge 91 12 91 19 4 1 ( 91 19 91 20 4 5 graph 91 20 91 25 64 1 . 91 25 91 26 18446744073709551615 3 end 91 26 91 29 27 1 , 91 29 91 30 4 3 out 91 31 91 34 67 1 , 91 34 91 35 4 1 - 91 36 91 37 18446744073709551615 1 1 91 37 91 38 18446744073709551615 1 ) 91 38 91 39 4 1 ) 91 39 91 40 19 1 ; 91 40 91 41 18446744073709551615 1 G 92 2 92 3 54 1 . 92 3 92 4 19 7 AddEdge 92 4 92 11 19 1 ( 92 11 92 12 19 7 NFAEdge 92 12 92 19 4 1 ( 92 19 92 20 4 2 in 92 20 92 22 66 1 , 92 22 92 23 4 3 out 92 24 92 27 67 1 , 92 27 92 28 4 1 - 92 29 92 30 18446744073709551615 1 1 92 30 92 31 18446744073709551615 1 ) 92 31 92 32 4 1 ) 92 32 92 33 19 1 ; 92 33 92 34 18446744073709551615 6 return 93 2 93 8 18446744073709551615 11 NFASubgraph 93 9 93 20 23 1 ( 93 20 93 21 23 2 in 93 21 93 23 66 1 , 93 23 93 24 23 3 out 93 25 93 28 67 1 ) 93 28 93 29 23 1 ; 93 29 93 30 18446744073709551615 1 } 94 1 94 2 18446744073709551615 11 NFASubgraph 95 1 95 12 23 3 NFA 95 13 95 16 28 2 :: 95 16 95 18 45 13 ConvertSymbol 95 18 95 31 45 1 ( 95 31 95 32 45 12 SymbolExpPtr 95 32 95 44 68 3 exp 95 45 95 48 69 1 ) 95 48 95 49 45 1 { 96 1 96 2 18446744073709551615 3 int 97 2 97 5 18446744073709551615 5 start 97 6 97 11 70 1 = 97 12 97 13 18446744073709551615 1 G 97 14 97 15 54 1 . 97 15 97 16 12 7 AddNode 97 16 97 23 12 1 ( 97 23 97 24 12 1 ) 97 24 97 25 12 1 ; 97 25 97 26 18446744073709551615 3 int 98 2 98 5 18446744073709551615 3 end 98 6 98 9 71 1 = 98 10 98 11 18446744073709551615 1 G 98 12 98 13 54 1 . 98 13 98 14 12 7 AddNode 98 14 98 21 12 1 ( 98 21 98 22 12 1 ) 98 22 98 23 12 1 ; 98 23 98 24 18446744073709551615 1 G 99 2 99 3 54 1 . 99 3 99 4 19 7 AddEdge 99 4 99 11 19 1 ( 99 11 99 12 19 7 NFAEdge 99 12 99 19 4 1 ( 99 19 99 20 4 5 start 99 20 99 25 70 1 , 99 25 99 26 4 3 end 99 27 99 30 71 1 , 99 30 99 31 4 3 exp 99 32 99 35 69 2 -> 99 35 99 37 18446744073709551615 9 character 99 37 99 46 72 1 ) 99 46 99 47 4 1 ) 99 47 99 48 19 1 ; 99 48 99 49 18446744073709551615 6 return 100 2 100 8 18446744073709551615 11 NFASubgraph 100 9 100 20 23 1 ( 100 20 100 21 23 5 start 100 21 100 26 70 1 , 100 26 100 27 23 3 end 100 28 100 31 71 1 ) 100 31 100 32 23 1 ; 100 32 100 33 18446744073709551615 1 } 101 1 101 2 18446744073709551615 0 0 73 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 20 dynamic_pointer_cast 49 1 3 0 4 endl 49 1 3 0 5 wcout 4 1 3 0 7 NFAEdge 10 1 3 0 72 7:22:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 10 1 3 0 72 7:32:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 10 1 3 0 72 7:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 6 1 3 0 12 from:NFAEdge 6 1 3 0 10 to:NFAEdge 6 1 3 0 15 pattern:NFAEdge 4 1 3 0 8 NFAGraph 21 1 3 0 16 AddNode:NFAGraph 9 1 3 0 72 18:6:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 6 1 3 0 12 adj:NFAGraph 21 1 3 0 15 size:vector:std 21 1 3 0 20 push_back:vector:std 31 1 3 0 10 vector:std 6 1 3 0 16 isFinal:NFAGraph 21 1 3 0 16 AddEdge:NFAGraph 10 1 3 0 73 23:32:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 21 1 3 0 13 at:vector:std 21 1 3 0 18 NodeCount:NFAGraph 4 1 3 0 11 NFASubgraph 10 1 3 0 73 31:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 10 1 3 0 73 31:41:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 6 1 3 0 17 start:NFASubgraph 6 1 3 0 15 end:NFASubgraph 4 1 3 0 3 NFA 21 1 3 0 11 Convert:NFA 36 1 3 0 13 RegularExpPtr 10 1 3 0 73 39:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 6 1 3 0 22 kind:RegularExpression 5 1 3 0 21 RegularExpressionKind 7 1 3 0 33 Alternation:RegularExpressionKind 21 1 3 0 22 ConvertAlternation:NFA 8 1 3 0 24 dynamic_pointer_cast:std 4 1 3 0 21 AlternationExpression 7 1 3 0 35 Concatenation:RegularExpressionKind 21 1 3 0 24 ConvertConcatenation:NFA 4 1 3 0 23 ConcatenationExpression 7 1 3 0 32 KleeneStar:RegularExpressionKind 21 1 3 0 20 ConvertKleenStar:NFA 4 1 3 0 20 KleeneStarExpression 7 1 3 0 28 Symbol:RegularExpressionKind 21 1 3 0 17 ConvertSymbol:NFA 4 1 3 0 16 SymbolExpression 36 1 3 0 17 AlternationExpPtr 10 1 3 0 73 65:55:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 9 1 3 0 73 67:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 6 1 3 0 26 left:AlternationExpression 9 1 3 0 73 68:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 6 1 3 0 27 right:AlternationExpression 9 1 3 0 72 69:6:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 6 1 3 0 5 G:NFA 9 1 3 0 72 70:6:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 36 1 3 0 19 ConcatenationExpPtr 10 1 3 0 73 77:59:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 9 1 3 0 73 79:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 6 1 3 0 28 left:ConcatenationExpression 9 1 3 0 73 80:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 6 1 3 0 29 right:ConcatenationExpression 36 1 3 0 16 KleeneStarExpPtr 10 1 3 0 73 84:52:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 9 1 3 0 73 86:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 6 1 3 0 29 innerExp:KleeneStarExpression 9 1 3 0 72 87:6:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 9 1 3 0 72 88:6:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 36 1 3 0 12 SymbolExpPtr 10 1 3 0 73 95:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 9 1 3 0 72 97:6:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 9 1 3 0 72 98:6:/home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 6 1 3 0 26 character:SymbolExpression 0 0 3 0 0 0 67 /home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.cpp 1528774771 67 /home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/NFA.hpp 1528774771 81 /home/jasonhe/Documents/MyCode/CPP/JuCi++/RegularExpression/RegularExpression.hpp 1528779025